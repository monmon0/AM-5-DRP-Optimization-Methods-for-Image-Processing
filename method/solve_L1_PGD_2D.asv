function [u_denoised, residuals] = solve_L1_PGD(u_true, u_noise, lambda, tolerance)
    % Convert inputs to double precision if they aren't already
    u_true = double(u_true);
    u_noise = double(u_noise);

    % Initialization
    L = 1.0;
    t = 1/L;
    u_curr = u_noise;
    u_prev = u_curr; 
    result_residuals = [];  
    residual_curr = tolerance + 1;
    [n,m,c] = size(u_true);   
   
    
    while residual_curr > tolerance
        disp(residual_curr)
        u_next = zeros(m, n, c);  % Initialize the next iterate
        for c = 1:c
            for i = 1: n
                for j = 1:m
                    % Update each element using the given formula
                    temp = u_curr(i,j,c) - t * (u_curr(i,j,c) - u_true(i,j,c));
                    u_next(i,j,c) = sign(temp) * max(abs(temp) - lambda * t, 0);
                end
            end
        end


        % Compute the residual (difference between consecutive iterations)
        residual_curr = norm(u_curr(:) - u_prev(:));
        result_residuals = [result_residuals, residual_curr];


        % Update the current solution and previous solution
        u_prev = u_curr;   % Update u_prev for the next iteration
        u_curr = u_next;   % Update u_curr to the new solution
    end
    u_denoised = u_curr;
    residuals = result_residuals;
end
